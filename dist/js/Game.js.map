{"version":3,"sources":["../../js/Game.js"],"names":[],"mappings":"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","file":"Game.js","sourcesContent":["// The function onload is loaded when the DOM has been loaded\r\nwindow.addEventListener(\"DOMContentLoaded\", function() {\r\n    new Game('game-canvas');\r\n});\r\n\r\n\r\nclass Game {\r\n    constructor(canvasId) {\r\n\r\n        let canvas          = document.getElementById(canvasId);\r\n        this.engine         = new BABYLON.Engine(canvas, true, null, false);\r\n\r\n        // Contains all loaded assets needed for this state\r\n        this.assets  = [];\r\n\r\n        // The state scene\r\n        this.scene   = null;\r\n\r\n        // Positions on cells that can be built on\r\n        this.availablePositions = [];\r\n\r\n        // Positions with a building on it\r\n        this.takenPositions = [];\r\n\r\n        // Resize window event\r\n        window.addEventListener(\"resize\", () => {\r\n            this.engine.resize();\r\n        });\r\n\r\n        this.run();\r\n\r\n    }\r\n    _initScene() {\r\n\r\n        let scene = new BABYLON.Scene(this.engine);\r\n        // Camera attached to the canvas\r\n        let camera = new BABYLON.FreeCamera(\"cam\", new BABYLON.Vector3(9.4, 15, -14), scene);\r\n        camera.rotation.x = 0.5;\r\n        camera.attachControl(this.engine.getRenderingCanvas());\r\n\r\n        // Hemispheric light to light the scene\r\n        let h = new BABYLON.HemisphericLight(\"hemi\", new BABYLON.Vector3(0,1,0), scene);\r\n        h.intensity = 0.9;\r\n        return scene;\r\n    }\r\n\r\n    run() {\r\n\r\n        this.scene = this._initScene();\r\n\r\n        // The loader\r\n        let loader =  new BABYLON.AssetsManager(this.scene);\r\n\r\n        //    var meshTask = this.loader.addMeshTask(\"skull task\", \"\", \"./assets/\", \"block02.babylon\");\r\n        //    meshTask.onSuccess = this._initMesh;\r\n\r\n        loader.onFinish = () => {\r\n\r\n            // Init the game\r\n            this._initGame();\r\n\r\n            // The state is ready to be played\r\n            this.isReady = true;\r\n\r\n            this.engine.runRenderLoop(() => {\r\n                this.scene.render();\r\n            });\r\n        };\r\n\r\n        loader.load();\r\n    }\r\n\r\n    _initGame() {\r\n\r\n        window.addEventListener(\"keydown\", (evt) => {\r\n            if (evt.keyCode == 32) {\r\n                if (this.scene.debugLayer._enabled) {\r\n                    this.scene.debugLayer.hide();\r\n                } else {\r\n                    this.scene.debugLayer.show();\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        for (let x=0; x<5; x++) {\r\n            for (let z=0; z<5; z++) {\r\n                let cell = new Cell(this);\r\n                cell.updatePosition(new BABYLON.Vector3(x*5, 0, z*5));\r\n                this.availablePositions.push(...cell.positions);\r\n            }\r\n        }\r\n        setInterval(() => {\r\n            this.build(this.getRandomPosition());\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * Returns an integer in [min, max[\r\n     */\r\n    static randomNumber(min, max) {\r\n        if (min === max) {\r\n            return (min);\r\n        }\r\n        let random = Math.random();\r\n        return Math.floor(((random * (max - min)) + min));\r\n    }\r\n\r\n    /**\r\n     * Returns a random available position, removes it from availablePositions\r\n     * and push it to takenPositions\r\n     * @returns {T}\r\n     */\r\n    getRandomPosition() {\r\n        let ind = Game.randomNumber(0,this.availablePositions.length);\r\n        let res = this.availablePositions.splice(ind, 1)[0];\r\n        this.takenPositions.push(res);\r\n        return res;\r\n    }\r\n\r\n    build(position) {\r\n        new Building(this, position);\r\n    }\r\n\r\n    cleanPosition(building) {\r\n        this.takenPositions.forEach((pos, index) => {\r\n           if (pos.equals(building.position)) {\r\n               this.takenPositions.splice(index, 1);\r\n               this.availablePositions.push(pos);\r\n           }\r\n        });\r\n    }\r\n\r\n}\r\n"]}